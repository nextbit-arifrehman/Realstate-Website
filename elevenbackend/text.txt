  This document outlines the API endpoints provided by the backend, which you will integrate with for the Real Estate Platform frontend. All
  endpoints are served from http://localhost:3001.

  Base URL: http://localhost:3001/api


  Authentication & Authorization Notes:
   * For protected routes, include the JWT token (obtained from /api/auth/login) in the Authorization header as a Bearer token: Authorization: 
     Bearer <your_jwt_token>.
   * Firebase client-side SDK is required on the frontend to obtain the idToken for initial login/registration, which is then sent to the
     backend.
   * Roles (User, Agent, Admin) are managed in MongoDB and embedded in the custom JWT issued by your backend. The verifyRole middleware
     enforces access control.

  ---

  1. Authentication


  POST /api/auth/register
   * Description: Registers a new user in the system. The backend automatically assigns the 'user' role by default.
   * Expects: email, password, displayName, photoURL (optional).
   * Returns: JWT token and user information.
   * Used In: Frontend Registration Page.


  POST /api/auth/login
   * Description: Logs in an existing user. The frontend should first authenticate with Firebase to get an idToken, then send that idToken to
     this endpoint.
   * Expects: idToken (from Firebase client-side authentication).
   * Returns: JWT token and user information (including role).
   * Used In: Frontend Login Page.


  GET /api/auth/me
   * Description: Retrieves information about the currently logged-in user. This is a protected route.
   * Expects: Valid JWT in Authorization header.
   * Returns: User information (UID, email, display name, photo URL, role, fraud status).
   * Used In: Navbar (to display user's name/picture), User Profile pages (to pre-fill data or display current user info).


  POST /api/auth/logout
   * Description: Handles server-side aspects of logout. For stateless JWTs, the primary logout action is client-side (removing the token from
     localStorage).
   * Expects: Valid JWT in Authorization header.
   * Returns: Success message.
   * Used In: Navbar (Logout button click).

  ---

  2. Users


  GET /api/users/profile
   * Description: Retrieves the detailed profile of the logged-in user. This is a protected route.
   * Expects: Valid JWT in Authorization header.
   * Returns: User's full profile details.
   * Used In: User Dashboard -> My Profile Page, Agent Dashboard -> Agent Profile Page, Admin Dashboard -> Admin Profile Page.


  GET /api/users/all
   * Description: Retrieves a list of all users registered in the system. This is a protected route, accessible only by 'admin' role.
   * Expects: Valid JWT for an 'admin' in Authorization header.
   * Returns: Array of all user objects.
   * Used In: Admin Dashboard -> Manage Users Page.


  PATCH /api/users/make-admin/:id
   * Description: Promotes a specified user to an 'admin' role. This is a protected route, accessible only by 'admin' role.
   * Expects: User's MongoDB _id in URL parameter. Valid JWT for an 'admin' in Authorization header.
   * Returns: Success message and updated user role.
   * Used In: Admin Dashboard -> Manage Users Page (e.g., "Make Admin" button).


  PATCH /api/users/make-agent/:id
   * Description: Promotes a specified user to an 'agent' role. This is a protected route, accessible only by 'admin' role.
   * Expects: User's MongoDB _id in URL parameter. Valid JWT for an 'admin' in Authorization header.
   * Returns: Success message and updated user role.
   * Used In: Admin Dashboard -> Manage Users Page (e.g., "Make Agent" button).


  PATCH /api/users/mark-fraud/:id
   * Description: Marks a specified agent as 'fraud'. This is a protected route, accessible only by 'admin' role.
   * Expects: Agent's MongoDB _id in URL parameter. Valid JWT for an 'admin' in Authorization header.
   * Returns: Success message and updated agent status.
   * Used In: Admin Dashboard -> Manage Users Page (e.g., "Mark as Fraud" button).


  DELETE /api/users/:id
   * Description: Deletes a user from the system. This is a protected route, accessible only by 'admin' role. It also handles deletion from
     Firebase.
   * Expects: User's MongoDB _id in URL parameter. User's Firebase uid in request body. Valid JWT for an 'admin' in Authorization header.
   * Returns: Success message.
   * Used In: Admin Dashboard -> Manage Users Page (e.g., "Delete User" button).

  ---

  3. Properties


  GET /api/properties/advertisements
   * Description: Retrieves a list of properties that are marked as advertised and verified. These are suitable for display on the homepage.
   * Expects: No authentication required.
   * Returns: Array of property objects.
   * Used In: Homepage -> Advertisement Section.


  GET /api/properties/search
   * Description: Searches for verified properties based on a location keyword.
   * Expects: location as a query parameter (e.g., ?location=New York). No authentication required.
   * Returns: Array of matching property objects.
   * Used In: All Properties Page -> Search functionality.


  GET /api/properties/
   * Description: Retrieves all properties that have been verified by an admin. This is a protected route.
   * Optional Query Parameters:
       * search: (e.g., ?search=London) Filters properties by location.
       * sort: (e.g., ?sort=priceAsc for ascending price, ?sort=priceDesc for descending price) Sorts properties by price.
   * Expects: Valid JWT in Authorization header.
   * Returns: Array of property objects.
   * Used In: All Properties Page (for initial load, search, and sort).


  GET /api/properties/:id
   * Description: Retrieves detailed information for a specific property. This is a protected route.
   * Expects: Property's MongoDB _id in URL parameter. Valid JWT in Authorization header.
   * Returns: Single property object.
   * Used In: Property Details Page.


  POST /api/properties/
   * Description: Allows an agent to add a new property to the system. The property's verification status will be 'pending' initially. This is
     a protected route, accessible only by 'agent' role.
   * Expects: Valid JWT for an 'agent' in Authorization header. Request body with title, location, image (URL), priceRange (object with min and
     max).
   * Returns: Success message and the newly created property object.
   * Used In: Agent Dashboard -> Add Property Page.


  GET /api/properties/agent/my-properties
   * Description: Retrieves all properties that have been added by the currently logged-in agent. This is a protected route, accessible only
     by 'agent' role.
   * Expects: Valid JWT for an 'agent' in Authorization header.
   * Returns: Array of property objects.
   * Used In: Agent Dashboard -> My Added Properties Page.


  PUT /api/properties/:id
   * Description: Allows an agent to update their existing property. An agent cannot update a property if its verificationStatus is
     'rejected'. This is a protected route, accessible only by 'agent' role.
   * Expects: Property's MongoDB _id in URL parameter. Valid JWT for an 'agent' in Authorization header. Request body with updated title,
     location, image, priceRange.
   * Returns: Success message and the updated property object.
   * Used In: Agent Dashboard -> My Added Properties Page (Update form).


  DELETE /api/properties/:id
   * Description: Allows an agent to delete their property. This is a protected route, accessible only by 'agent' role.
   * Expects: Property's MongoDB _id in URL parameter. Valid JWT for an 'agent' in Authorization header.
   * Returns: Success message.
   * Used In: Agent Dashboard -> My Added Properties Page (Delete button).


  PATCH /api/properties/verify/:id
   * Description: Allows an admin to change a property's verification status to 'verified' or 'rejected'. This is a protected route,
     accessible only by 'admin' role.
   * Expects: Property's MongoDB _id in URL parameter. Valid JWT for an 'admin' in Authorization header. Request body with status ('verified'
     or 'rejected').
   * Returns: Success message and the updated property object.
   * Used In: Admin Dashboard -> Manage Properties Page (Verify/Reject buttons).


  GET /api/properties/admin/all
   * Description: Retrieves all properties in the system, regardless of their verification status. This is a protected route, accessible only
     by 'admin' role.
   * Expects: Valid JWT for an 'admin' in Authorization header.
   * Returns: Array of all property objects.
   * Used In: Admin Dashboard -> Manage Properties Page.


  GET /api/properties/admin/advertise
   * Description: Retrieves properties that are verified and thus eligible for advertisement. This is a protected route, accessible only by
     'admin' role.
   * Expects: Valid JWT for an 'admin' in Authorization header.
   * Returns: Array of property objects.
   * Used In: Admin Dashboard -> Advertise Property Page.


  PATCH /api/properties/admin/advertise/:id
   * Description: Allows an admin to mark a property as advertised (isAdvertised: true) or remove it from advertisements (isAdvertised: 
     false). This is a protected route, accessible only by 'admin' role.
   * Expects: Property's MongoDB _id in URL parameter. Valid JWT for an 'admin' in Authorization header. Request body with isAdvertised
     (boolean).
   * Returns: Success message and the updated property object.
   * Used In: Admin Dashboard -> Advertise Property Page (Advertise button).

  ---

  4. Offers


  POST /api/offers/
   * Description: Allows a user to make an offer on a property. This is a protected route, accessible only by 'user' role. The backend
     validates the offerAmount against the property's price range.
   * Expects: Valid JWT for a 'user' in Authorization header. Request body with propertyId, offerAmount, buyingDate.
   * Returns: Success message and the newly created offer object.
   * Used In: User Dashboard -> Wishlist Page -> "Make an Offer" form.


  GET /api/offers/my-offers
   * Description: Retrieves all offers made by the currently logged-in user. This is a protected route, accessible only by 'user' role.
   * Expects: Valid JWT for a 'user' in Authorization header.
   * Returns: Array of offer objects.
   * Used In: User Dashboard -> Property Bought Page.


  GET /api/offers/agent/requested-properties
   * Description: Retrieves all offers that have been made for properties owned by the currently logged-in agent. This is a protected route,
     accessible only by 'agent' role.
   * Expects: Valid JWT for an 'agent' in Authorization header.
   * Returns: Array of offer objects.
   * Used In: Agent Dashboard -> Requested Properties Page.


  GET /api/offers/agent/sold-properties
   * Description: Retrieves all offers for properties owned by the logged-in agent that have a status of 'bought'. This is a protected route,
     accessible only by 'agent' role.
   * Expects: Valid JWT for an 'agent' in Authorization header.
   * Returns: Array of offer objects.
   * Used In: Agent Dashboard -> My Sold Properties Page.


  GET /api/offers/agent/total-sold-amount
   * Description: Calculates and retrieves the total monetary amount of properties sold by the logged-in agent. This is a protected route,
     accessible only by 'agent' role.
   * Expects: Valid JWT for an 'agent' in Authorization header.
   * Returns: Object with totalSoldAmount.
   * Used In: Agent Dashboard -> My Sold Properties Page (to display total earnings).


  PATCH /api/offers/agent/accept/:id
   * Description: Allows an agent to accept a specific offer. This is a protected route, accessible only by 'agent' role. The backend
     automatically rejects other pending offers for the same property.
   * Expects: Offer's MongoDB _id in URL parameter. Valid JWT for an 'agent' in Authorization header. Request body with action: 'accept'.
   * Returns: Success message and the updated offer object.
   * Used In: Agent Dashboard -> Requested Properties Page (Accept button).


  PATCH /api/offers/agent/reject/:id
   * Description: Allows an agent to reject a specific offer. This is a protected route, accessible only by 'agent' role.
   * Expects: Offer's MongoDB _id in URL parameter. Valid JWT for an 'agent' in Authorization header. Request body with action: 'reject'.
   * Returns: Success message and the updated offer object.
   * Used In: Agent Dashboard -> Requested Properties Page (Reject button).


  PATCH /api/offers/user/pay/:id
   * Description: Marks an offer as 'bought' after a payment has been successfully processed (either simulated or via an external payment
     gateway on the frontend). This is a protected route, accessible only by 'user' role.
   * Expects: Offer's MongoDB _id in URL parameter. Valid JWT for a 'user' in Authorization header. Request body with transactionId.
   * Returns: Success message and the updated offer object.
   * Used In: User Dashboard -> Property Bought Page -> Payment Confirmation (after payment is processed by frontend).

  ---

  5. Reviews


  GET /api/reviews/latest
   * Description: Retrieves the most recently added user reviews. Suitable for display on the homepage.
   * Optional Query Parameters:
       * limit: (e.g., ?limit=3) Specifies the maximum number of latest reviews to return.
   * Expects: No authentication required.
   * Returns: Array of review objects.
   * Used In: Homepage -> Latest User Review Section.


  GET /api/reviews/property/:propertyId
   * Description: Retrieves all reviews associated with a specific property.
   * Expects: Property's MongoDB _id in URL parameter. No authentication required.
   * Returns: Array of review objects.
   * Used In: Property Details Page -> Review Section.


  POST /api/reviews/
   * Description: Allows a user to add a new review for a property. This is a protected route, accessible only by 'user' role.
   * Expects: Valid JWT for a 'user' in Authorization header. Request body with propertyId and reviewText.
   * Returns: Success message and the newly created review object.
   * Used In: Property Details Page -> "Add a Review" modal/form.


  GET /api/reviews/my-reviews
   * Description: Retrieves all reviews that have been made by the currently logged-in user. This is a protected route, accessible only by
     'user' role.
   * Expects: Valid JWT for a 'user' in Authorization header.
   * Returns: Array of review objects.
   * Used In: User Dashboard -> My Reviews Page.


  DELETE /api/reviews/:id
   * Description: Deletes a review by its ID. This is a protected route. A user can delete their own review, and an admin can delete any
     review.
   * Expects: Review's MongoDB _id in URL parameter. Valid JWT in Authorization header.
   * Returns: Success message.
   * Used In: User Dashboard -> My Reviews Page (Delete button), Admin Dashboard -> Manage Reviews Page (Delete button).


  GET /api/reviews/admin/all
   * Description: Retrieves all reviews in the system for administrative management. This is a protected route, accessible only by 'admin'
     role.
   * Expects: Valid JWT for an 'admin' in Authorization header.
   * Returns: Array of all review objects.
   * Used In: Admin Dashboard -> Manage Reviews Page.

  ---

  6. Wishlist


  POST /api/wishlist/
   * Description: Adds a property to the logged-in user's wishlist. This is a protected route, accessible only by 'user' role.
   * Expects: Valid JWT for a 'user' in Authorization header. Request body with propertyId.
   * Returns: Success message and the newly wishlisted item object.
   * Used In: Property Details Page -> "Add to Wishlist" button.


  GET /api/wishlist/
   * Description: Retrieves all properties currently in the logged-in user's wishlist. This is a protected route, accessible only by 'user'
     role. The backend populates property details for each wishlisted item.
   * Expects: Valid JWT for a 'user' in Authorization header.
   * Returns: Array of wishlisted item objects, each including propertyDetails.
   * Used In: User Dashboard -> Wishlist Page.


  DELETE /api/wishlist/:id
   * Description: Removes a property from the user's wishlist. This is a protected route, accessible only by 'user' role.
   * Expects: Wishlist item's MongoDB _id in URL parameter. Valid JWT for a 'user' in Authorization header.
   * Returns: Success message.
   * Used In: User Dashboard -> Wishlist Page -> "Remove" button.

  ---

  7. Payments


  POST /api/payment/create-payment-intent
   * Description: Creates a Stripe Payment Intent on the backend and returns its clientSecret. This clientSecret is then used by the frontend
     with Stripe.js to complete the payment process securely. This is a protected route, accessible only by 'user' role.
   * Expects: Valid JWT for a 'user' in Authorization header. Request body with amount (in cents, e.g., 1000 for $10.00).
   * Returns: Object with clientSecret.
   * Used In: User Dashboard -> Property Bought Page -> Payment Page (to initiate a real Stripe payment flow).
