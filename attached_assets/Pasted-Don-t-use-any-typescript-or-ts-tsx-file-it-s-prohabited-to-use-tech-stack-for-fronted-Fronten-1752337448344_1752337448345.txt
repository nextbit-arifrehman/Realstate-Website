Don't use any typescript or ts,tsx file it's prohabited to use
 tech stack for fronted: 
✅ Frontend Tech Stack (Complete List)
Technology / Library	Purpose
HTML + CSS	Basic structure and styling
Tailwind CSS	Utility-first CSS framework for custom styling
DaisyUI	Pre-built Tailwind UI components for rapid development
ShadCN UI	Accessible, modern UI components built on Radix + Tailwind
Vite	Fast frontend build tool
React.js	Core frontend JavaScript framework
React Router (react router-dom backdated so use latest one )	Client-side routing for SPA navigation
Firebase Auth	Authentication with Email/Password & Google login
React Context API	Global state (e.g., user, auth, roles, theme)
Axios	HTTP client to communicate with the backend
TanStack React Query	Data fetching, caching, real-time UI updates
React Hook Form	Form handling and validation
Stripe.js + @stripe/react-stripe-js	Stripe payment flow integration
CardElement	Secure card input UI from Stripe Elements
SweetAlert2 / React Toastify	Toasts/alerts for feedback and status
dotenv (via Vite)	Manage environment variables (API URLs, Stripe keys, etc.)
JWT + Cookies 	Token-based authentication and persistence 
  
  note: if you need any image  you can ask me i will provide you link of it or direct drop inisde project folder based on need: make sure alreadys write responsive code  which is support moble tablet desktop across all device responive .as for image you can suggest me provide image details i will findout provide you.
  
  this main doc :   You must develop a Real estate Platform (an online platform where people can add and buy real estate properties) using the MERN stack.The website will have three user roles: user, agent, and admin. The platform will enable users to wishlist and purchase properties, and provide property reviews. Agents will be empowered to add new properties and track their requested and sold properties. Admins will have comprehensive management capabilities to manage properties, users, and reviews, ensuring smooth and efficient platform operations Make it responsive for all devices. You need to make it responsive for mobile, tablet and desktop views. Make the dashboard responsive as well. 
After reloading the page of a private route, the user should not be redirected to the login page.
Use the Environment variable to hide the Firebase config keys and Mongodb credentials.
Don’t use any Lorem ipsum text in your website. 
Show sweet alert/toast/notification for all the crud operations, successful authentication login, and sign-up. Don’t use the default browser alert. Main Tasks  Home-Page
Home page will have a navbar, banner/slider, Advertisement section,Latest User review section and a footer.

 Advertisement section: In this section there will be at least 4 cards which will contain 
property image.
Property location.
price range.
verification status.
Details button.(clicking on the details button will redirect the user to the   property details page.See requirement 6)
      
Latest User review: In this section there will be at least 3 latest(recently added) user reviews which will contain:
Reviewer name.
Reviewer Image.
Review description.
property title.

Navbar
The navbar will have a website name with the logo, Home, All properties, Dashboard and Login. Your website will have these routes. Except for the Home route, other routes will be private.

Unique Extra Section
Add two extra sections to the home page in addition to the sections mentioned above.

 All properties page 🔒:  
This page will contain all the properties  added by all the real estate agents (Req. 7>> addProperty ) which are   verified by admin  (Req.8 > manage property )  Each card will contain the following informations:
Property image.
Property title.
Property location.
Agent name.
Agent image.
Verification status.
Price range.
Details button.(clicking on the details button will redirect the user to the property details page.See req. 5)
     
This will be a private/protected route.

 Property Details page 🔒: 
This page should display detailed information about the property. What you will include in the detailed information is entirely up to you but make sure to add property title, description, price range and agent name.
There will be a button on the details page called “Add to wishlist”.Clicking this button will add the property on the wishlist page  and also the information will be saved to the database.

There will be a review section at the bottom of the details page where you have to show all the reviews for that specific property which are made by the users.

There will also be an “Add a review” button on this page.Clicking this button a user can add a review for this specific property through a modal.

This will be a private/protected route.


User Dashboard 🔒( User Only ):
When a user clicks on the Dashboard, he/she will be redirected to a page where there will be the following routes:
My Profile.
Wishlist.
Property bought.
My reviews.

My Profile page:  On this page there will be some information about the logged in user.The information must include user name,user image,role(if the user is a regular user then don’t show anything).You can add other relevant information if you wish.

Wishlist:  This page will contain all the properties which the user have wishlisted by clicking the “Add to wishlist” button on the details page.Each card will contain the following informations:
Property image.
Property title.
property location.
Agent name.
Agent image.
verification status.
Price range.
Make an offer button.
remove button.

Clicking the “Make an offer” button will navigate the user to a new page where there will be a form which will have some input fields.
Property title (readonly).
Property location (readonly).
Agent name (readonly).
Offer amount. (User can not add an amount which is not in range of the price which   was specified by the agent of that property)
buyer email(readonly)
buyer name (readonly)
buying date.
offer button

By clicking the offer button 
the user can offer an amount.  ( This amount must be in between the agent specified price range.If the price is not in between the price range then the offer will not be completed and an error message will be shown) to the agent for that specific property.
This information will be saved to the database and also it will be added to users “Property bought” page with the status “pending”.

Only users can buy property. Agent and admin can not buy property.  Add a Validation. 

Property bought:  All the properties which the user has offered for will be shown here.Each card will have the following information.
property location.
property title.
property image
Agent name
offered amount.
status
                                        
- There will be a status on each card.initially the status will be “pending”.If the offer is accepted by the agent then this status will be “accepted” (see Requested/offered properties section in agent dashboard)  and a “Pay” button will appear on the card.
Clicking the “Pay” button will redirect user to the payment page where the user can pay the offered amount through stripe or any other payment methods for that property.If the payment is completed then the status will be “bought” also payment transaction id will be shown in place of the pay button.


My reviews: In this page a logged in user will see only his/her reviews which he/she has given for any property.Each review card will contain
property title
agent name
review time
review description
delete button.

-If the user clicks the delete button then the review will be deleted from the my reviews page and also from the database.

Agent Dashboard🔒( Agent Only  ):
-When an agent clicks on the Dashboard, he/she will be redirected to a page where there will be the following routes:
Agent Profile .
Add Property.
My added properties.
My sold properties.
Requested properties.

Agent Profile: On this page there will be some information about the logged in user.The information must include user name,user image,role(if the user is a regular user then don’t show anything).You can add other relevant information if you wish.

Add Property: Create an `Add Property` page where there will be a form for the agent to add a property. The form will have:
Property title.
Property location.
Property image (agents will be able to upload images from their local pc or mobile).
Agent name (readonly). (Agent name will be the current logged in user’s displayName)
Agent email(readonly). (Agent email will be the current logged in user’s email)
Price range.
Add a property button.            

-On clicking the “Add property” button the property will be saved into the database.

My added properties: On this page an agent will see all his/her added properties.each card will contain
Property image.
Property title.
property location.
Agent name.
Agent image.
verification status.(by default the status will be “pending”.This verification status will be modified by the admin.if the admin verifies the property then the verification status will be “verified” and if the admin rejects then the verification status will be “rejected”)
Price range.
Minimum Price
Maximum Price 
update button (if the verification status is “rejected” then the update button will disappear, which means the agent won't be able to update the property).
delete button

-Clicking on the `Update button` will redirect the user to a form page where the form will have the following fields:
Property image.
Property title.
property location.
Agent name.(readonly)
Agent email.(readonly)
Price range.

-Initially these fields will be filled up by previous values but the agent can modify these values.If the user clicks the submit button then the data will be updated in the database.

-clicking the delete button will remove the property from the “My added properties” and also from the database.

My sold properties: On this page all the sold properties of the specific agent will be shown.Only the properties for which the buyer has paid for will be shown here.Show these data in a tabular format.Each data will contain->
property title.
Property location.
buyer email
buyer name
sold price.

Requested/offered properties: On this page all the offers which are made by the users for the properties that the agent has added will be shown.These data will be shown in a tabular format and each data will contain
property title.
Property location.
buyer email
buyer name
offered price.
accept button
reject button

-by default status will be pending.After clicking the accept button this status will be changed to “accepted” and both the accept and reject button will disappear and the status will be shown there.This will also happen for the reject button and “rejected” status will be shown.

-If the Agent accepts an offer for a specific property then other offers for that property will be rejected automatically and “rejected” status will be shown threre.
  💡Hint: use updateMany with $ne operator 

Admin Dashboard🔒(Admin only ):
Private Route and only the users who has the admin role will be able to see these routes & When an admin clicks on the Dashboard, he/she will be redirected to a page where there will be the following routes:
Admin Profile.
Manage Properties.
Manage Users.
Manage reviews.

Admin Profile: in this page there will be some information about the logged in user.The information must include user name,user image,role(if the user is a regular user then don’t show anything).You can add other relevant information if you wish.
Manage properties: All the properties which the agents have added will be shown here in a tabular format.each data will have
property title.
Property location.
Agent name
agent email
price range.
verify button
reject button.          

-if the admin clicks the verify button then that property will be added to the “All properties” page with the verified status also verify button and reject button will disappear and a status “verified” will be shown there.If the admin clicks the reject button then the property will not be added to the all properties page and “rejected” status will be shown in place of verify and reject button.

Manage users:  Show all the users in a tabular format where each row will have:
User name
User email
Make admin button
Make agent button
Mark as fraud button (This button will only appear if the user is an agent)
Delete user

admin can make a user admin by clicking on the Make Admin button, 
admin can make a user “agent” by clicking the make agent button
 admin can delete a user from the database by clicking the delete user button. 
You don't need to delete all the properties the user has added. 
 You have to delete the user from firebase also. 

If the admin clicks the “Mark as fraud” button for any agent then 
that specific agent will be marked as fraud and a “Fraud” status will be shown in place of “Make admin” , “Make agent” .
All the properties that the agent has added will be removed from the All properties
Agents with fraud  will not be able to add any properties in the future.

Manage reviews: All the user reviews for all the properties will be shown here.Each card will contain reviewer image,reviewer email,reviewer name,review and a delete button.If the admin clicks the delete button of any review card then that review will be removed from this page and also from the users page who has made this review.

Authentication System
You Must implement Email and password-based Authentication. This means you will have to implement the Registration and the login page. Users should be able to toggle between Login and Registration view.Also you need to implement at least one social login system.
> `Note:` Do not enforce the `forget or reset password feature` and the `email verification method`, as it will inconvenience the examiner. If you want, you can add email verification/forget the password after receiving the assignment result.

On the Registration page, display errors when:

     The password

     - is less than 6 characters
     - don't have a capital letter
     - don't have a special character

On the Login page, display errors when:

    - password doesn't match
    - email doesn't match
    You can take the error message from Firebase. You can show the error below the input fields or via alert/toast. If you use alert/toast, do not implement the browser alert.

Use Tanstack query 
Use Tanstack Query forwith mutation for data fetching and posting.
Others 
Once logged in, the user name, profile picture and the logout button should appear on the navbar. If the user clicks on the logout button, make sure to log him/her out.
Add a 404 page (not found page)


Challenges task:

1. Add a search functionality on the “All properties” page based on the property location.

2. Implement a sort functionality based on the price range on the “All properties” page.

3. Implement JWT on login (Email/Password and social) and store the token (You must store the token in localStorage).

4. Add a section on My sold properties page of the Agent dashboard where the total property sold amount of a specific agent will be shown.

5.Add another route on the admin dashboard called “Advertise property”.In this route all the admin verified properties will be shown in a tabular format.Each data will contain property image,property title,price range,Agent name “Advertise” button.

            -On clicking the “Advertise" button an admin can advertise a specific property.This property will  be shown in the advertisement section on the homepage.we have already created   backend site all you need to create fronted and connect to backend api here backend stuture: Backend Structure: 



  
backend api which is use this project
   base url of api :  https://e39e5546163d.ngrok-free.app 
  ---

  API Endpoints:

  1. Authentication Routes (`authRoutes.js`)


   * `POST /api/register`
       * Description: Registers a new user.
       * Frontend Connection: The registration form on the frontend should send a POST request to this endpoint with user credentials (e.g.,
         email, password).
   * `POST /api/login`
       * Description: Logs in an existing user.
       * Frontend Connection: The login form on the frontend should send a POST request to this endpoint with user credentials. On successful
         login, the frontend will receive a JWT token to store (e.g., in localStorage) for subsequent authenticated requests.
   * `GET /api/me`
       * Description: Retrieves information about the currently authenticated user. This route is protected by JWT verification.
       * Frontend Connection: After a user logs in, the frontend can send a GET request to this endpoint, including the JWT token in the
         authorization header, to fetch user details for session validation or displaying profile information.
   * `POST /api/logout`
       * Description: Logs out the current user. This route is protected by JWT verification.
       * Frontend Connection: When the user clicks a "Logout" button, the frontend should send a POST request to this endpoint. The frontend
         should also clear the stored JWT token.

  2. User Routes (`userRoutes.js`)


   * `GET /api/user/profile`
       * Description: Retrieves the profile information of the logged-in user. This route is protected and requires a valid JWT.
       * Frontend Connection: After a user logs in, the frontend can fetch and display the user's profile details (name, image, etc.) by
         making a GET request to this endpoint with the JWT token.
   * `GET /api/user/all`
       * Description: Retrieves a list of all users. This route is restricted to users with the 'admin' role and requires a valid JWT.
       * Frontend Connection: The admin dashboard can use this endpoint to display a table of all users.
   * `PATCH /api/user/make-admin/:id`
       * Description: Changes a user's role to 'admin'. This route is restricted to users with the 'admin' role and requires a valid JWT.
       * Frontend Connection: An admin interface can have a button or action to promote a user to admin, sending a PATCH request with the
         user's ID.
   * `PATCH /api/user/make-agent/:id`
       * Description: Changes a user's role to 'agent'. This route is restricted to users with the 'admin' role and requires a valid JWT.
       * Frontend Connection: Similar to make-admin, an admin interface can have a button or action to promote a user to agent.
   * `PATCH /api/user/mark-fraud/:id`
       * Description: Marks an agent as fraudulent. This route is restricted to users with the 'admin' role and requires a valid JWT.
       * Frontend Connection: An admin interface can have a button or action to mark an agent as fraudulent.
   * `DELETE /api/user/:id`
       * Description: Deletes a user. This route is restricted to users with the 'admin' role and requires a valid JWT.
       * Frontend Connection: An admin interface can have a delete button next to each user in a list, sending a DELETE request with the
         user's ID.

  3. Property Routes (`propertyRoutes.js`)


   * `GET /api/properties/advertisements`
       * Description: Retrieves properties marked for advertisement to be displayed on the homepage.
       * Frontend Connection: The homepage banner/advertisement section will make a GET request to this endpoint to fetch properties to
         display.
   * `GET /api/properties/search`
       * Description: Searches for properties based on location.
       * Frontend Connection: The "All properties" page will use this endpoint for its search functionality, sending the location as a query
         parameter.
   * `GET /api/properties/`
       * Description: Retrieves all properties that have been verified by an admin. This route is protected and requires a valid JWT.
       * Frontend Connection: The "All properties" page will make a GET request to this endpoint to display all available verified properties.
   * `GET /api/properties/:id`
       * Description: Retrieves detailed information for a specific property by its ID. This route is protected and requires a valid JWT.
       * Frontend Connection: When a user clicks on a "Details" button for a property, the frontend will navigate to a property details page
         and make a GET request to this endpoint, passing the property's ID.
   * `POST /api/properties/`
       * Description: Allows an agent to add a new property. This route is restricted to users with the 'agent' role and requires a valid JWT.
       * Frontend Connection: The "Add Property" form in the agent dashboard will send a POST request to this endpoint with the new property's
         data.
   * `GET /api/properties/agent/my-properties`
       * Description: Retrieves all properties added by the currently logged-in agent. This route is restricted to users with the 'agent' role
         and requires a valid JWT.
       * Frontend Connection: The "My added properties" section of the agent dashboard will make a GET request to display the agent's listings.
   * `PUT /api/properties/:id`
       * Description: Allows an agent to update an existing property. This route is restricted to users with the 'agent' role and requires a
         valid JWT.
       * Frontend Connection: The "Update Property" form in the agent dashboard will send a PUT request with the updated property data and the
         property's ID.
   * `DELETE /api/properties/:id`
       * Description: Allows an agent to delete one of their properties. This route is restricted to users with the 'agent' role and requires a
         valid JWT.
       * Frontend Connection: The "My added properties" section will have a delete button for each property, sending a DELETE request with the
         property's ID.
   * `PATCH /api/properties/verify/:id`
       * Description: Allows an admin to verify a property. This route is restricted to users with the 'admin' role and requires a valid JWT.
       * Frontend Connection: The "Manage Properties" section of the admin dashboard will have a "Verify" button for properties, sending a
         PATCH request with the property's ID.
   * `GET /api/properties/admin/all`
       * Description: Retrieves all properties (including unverified ones) for admin management. This route is restricted to users with the
         'admin' role and requires a valid JWT.
       * Frontend Connection: The "Manage Properties" section of the admin dashboard will make a GET request to display all properties in a
         tabular format.
   * `GET /api/properties/admin/advertise`
       * Description: Retrieves properties that are verified and available for advertisement by an admin. This route is restricted to users
         with the 'admin' role and requires a valid JWT.
       * Frontend Connection: The "Advertise property" route in the admin dashboard will use this endpoint to list properties that can be
         advertised.
   * `PATCH /api/properties/admin/advertise/:id`
       * Description: Allows an admin to mark a property for advertisement. This route is restricted to users with the 'admin' role and
         requires a valid JWT.
       * Frontend Connection: The "Advertise property" section of the admin dashboard will have an "Advertise" button, sending a PATCH request
         with the property's ID.

  4. Offer Routes (`offerRoutes.js`)



   * `POST /api/offers/`
       * Description: Allows a user to make an offer on a property. This route is restricted to users with the 'user' role and requires a valid
         JWT.
       * Frontend Connection: The "Make an offer" form on the wishlist page will send a POST request to this endpoint with the offer details.
   * `GET /api/offers/my-offers`
       * Description: Retrieves all properties for which the logged-in user has made an offer. This route is restricted to users with the
         'user' role and requires a valid JWT.
       * Frontend Connection: The "Property bought" page in the user dashboard will make a GET request to display the user's offers.
   * `GET /api/offers/agent/requested-properties`
       * Description: Retrieves all offers made by users for properties added by the logged-in agent. This route is restricted to users with
         the 'agent' role and requires a valid JWT.
       * Frontend Connection: The "Requested properties" section of the agent dashboard will make a GET request to display incoming offers.
   * `GET /api/offers/agent/sold-properties`
       * Description: Retrieves all properties sold by the logged-in agent (where payment has been completed). This route is restricted to
         users with the 'agent' role and requires a valid JWT.
       * Frontend Connection: The "My sold properties" section of the agent dashboard will make a GET request to display the agent's sold
         properties.
   * `GET /api/offers/agent/total-sold-amount`
       * Description: Retrieves the total sold amount for properties sold by the logged-in agent. This route is restricted to users with the
         'agent' role and requires a valid JWT.
       * Frontend Connection: The "My sold properties" page in the agent dashboard will use this endpoint to display the total sold amount.
   * `PATCH /api/offers/agent/accept/:id`
       * Description: Allows an agent to accept a specific offer. This route is restricted to users with the 'agent' role and requires a valid
         JWT.
       * Frontend Connection: The "Requested properties" section of the agent dashboard will have an "Accept" button for each offer, sending a
         PATCH request with the offer's ID.
   * `PATCH /api/offers/agent/reject/:id`
       * Description: Allows an agent to reject a specific offer. This route is restricted to users with the 'agent' role and requires a valid
         JWT.
       * Frontend Connection: The "Requested properties" section of the agent dashboard will have a "Reject" button for each offer, sending a
         PATCH request with the offer's ID.
   * `PATCH /api/offers/user/pay/:id`
       * Description: Marks an offer as "bought" after successful payment. This route is restricted to users with the 'user' role and requires
         a valid JWT.
       * Frontend Connection: After a successful payment, the frontend will send a PATCH request to this endpoint to update the offer status.


  5. Review Routes (`reviewRoutes.js`)


   * `GET /api/reviews/property/:propertyId`
       * Description: Retrieves all reviews for a specific property. This is a public route.
       * Frontend Connection: The property details page will make a GET request to this endpoint, passing the property's ID, to display all
         reviews related to that property.
   * `GET /api/reviews/latest`
       * Description: Retrieves the latest reviews for display on the homepage. This is a public route.
       * Frontend Connection: The "Latest User review" section on the homepage will make a GET request to this endpoint to fetch and display
         recent reviews.
   * `POST /api/reviews/`
       * Description: Allows a user to add a new review for a property. This route is restricted to users with the 'user' role and requires a
         valid JWT.
       * Frontend Connection: The "Add a review" modal on the property details page will send a POST request to this endpoint with the review
         content.
   * `GET /api/reviews/my-reviews`
       * Description: Retrieves all reviews made by the currently logged-in user. This route is restricted to users with the 'user' role and
         requires a valid JWT.
       * Frontend Connection: The "My reviews" page in the user dashboard will make a GET request to display the user's own reviews.
   * `DELETE /api/reviews/:id`
       * Description: Deletes a review by its ID. A user can delete their own review, and an admin can delete any review. This route requires
         a valid JWT.
       * Frontend Connection: The "My reviews" page (for users) and "Manage reviews" page (for admins) will have a delete button for each
         review, sending a DELETE request with the review's ID.
   * `GET /api/reviews/admin/all`
       * Description: Retrieves all reviews for administrative purposes. This route is restricted to users with the 'admin' role and requires
         a valid JWT.
       * Frontend Connection: The "Manage reviews" section of the admin dashboard will make a GET request to display all reviews.

  6. Payment Routes (`paymentRoutes.js`)


   * `POST /api/payment/create-payment-intent`
       * Description: Creates a Stripe Payment Intent. This route is restricted to users with the 'user' role and requires a valid JWT.
       * Frontend Connection: When a user proceeds to pay for a property (after an offer is accepted), the frontend will send a POST request
         to this endpoint to initiate the payment process and get a client secret from Stripe.

  7. Wishlist Routes (`wishlistRoutes.js`)


   * `POST /api/wishlist/`
       * Description: Adds a property to the user's wishlist. This route is restricted to users with the 'user' role and requires a valid JWT.
       * Frontend Connection: The "Add to wishlist" button on the property details page will send a POST request to this endpoint with the
         property's ID.
   * `GET /api/wishlist/`
       * Description: Retrieves all properties in the logged-in user's wishlist. This route is restricted to users with the 'user' role and
         requires a valid JWT.
       * Frontend Connection: The "Wishlist" page in the user dashboard will make a GET request to display the user's wishlisted properties.
   * `DELETE /api/wishlist/:id`
       * Description: Removes a property from the user's wishlist. This route is restricted to users with the 'user' role and requires a valid
         JWT.
       * Frontend Connection: The "Wishlist" page will have a "remove" button for each wishlisted property, sending a DELETE request with the
         property's ID.


 