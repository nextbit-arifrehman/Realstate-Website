🧾 HOME PAGE FLOW
Components:
Navbar

Banner/Slider (can use Swiper.js)

4 Advertisement cards → from GET /ads

3 Recent Reviews → from GET /reviews/latest

2 Custom Sections (design-specific)

Tech:
Fetch data using Tanstack Query

Swiper.js for carousel

Responsive using TailwindCSS

🏘️ ALL PROPERTIES PAGE (Private Route)
User visits /all-properties

Protected with JWT (usePrivateRoute)

Must be logged in

Client calls backend: GET /properties

Only verified properties are returned

Show properties in cards

Image, Title, Agent Name + Image, Location, Verification status

“Details” button → navigates to /property/:id

Add Search & Filter

Query params: ?search=Dhaka&sort=asc

Backend uses regex search & sorting logic

🏡 PROPERTY DETAILS PAGE
User visits /property/:id

Private Route

Fetch property: GET /properties/:id

Client shows:

Title, description, price range, agent details

Button: “Add to Wishlist” → POST /wishlist

Button: “Add a Review” → opens modal → POST /reviews

Review Section

Fetch: GET /reviews/:propertyId

Add new: modal form → send to backend

❤️ ADD TO WISHLIST FLOW
User clicks "Add to Wishlist"

POST /wishlist

Payload: userEmail, propertyId

Backend saves to wishlists collection

Show toast “Added to Wishlist”

🛒 MAKE OFFER FLOW
User clicks “Make Offer” from Wishlist

Navigates to /dashboard/user/offer/:id

Client fetches property by ID

Fields are readonly (title, agent, location)

User enters offer amount

Must be within price range

Form validation: minPrice <= offer <= maxPrice

Submit offer → POST /offers

Payload: user, agent, propertyId, price

Backend saves to offers collection

status = pending

Offer now appears on “Property Bought” page

🧾 PROPERTY BOUGHT FLOW
User visits /dashboard/user/bought

Fetch: GET /offers/user

Each card shows:

Property info, offered price, status

If status = accepted

Show "Pay" button → goes to /payment/:offerId

💳 PAYMENT FLOW (Stripe)
User clicks Pay

Navigates to payment page

Load Stripe Elements

Send amount to backend → POST /create-payment-intent

Client gets clientSecret

Complete Stripe checkout

On success:

Save transactionId to offer

Update status: bought

🧑‍💼 USER DASHBOARD ROUTES
/dashboard/user/profile → show user info

/dashboard/user/wishlist → list + remove/make offer

/dashboard/user/bought → show offers + status + payment

/dashboard/user/reviews → list + delete

🧑‍💼 AGENT DASHBOARD FLOWS
Add Property
Route: /dashboard/agent/add-property

Form with image upload, price range

Submit → POST /properties

Default verification status = pending

My Properties
/dashboard/agent/my-properties

Fetch: GET /properties/agent

Update/delete if not rejected

Requested Offers
/dashboard/agent/requests

Table: buyers, price, status

Accept/Reject buttons:

Accept: PATCH /offers/status/:id → accepted

Auto-reject others: updateMany({ propertyId, _id: { $ne: acceptedId } }, { status: rejected })

Sold Properties
/dashboard/agent/sold

Show bought offers → buyer info, price

🛠️ ADMIN DASHBOARD FLOWS
Manage Properties
/dashboard/admin/manage-properties

Fetch all → show status

Verify → PATCH /properties/verify/:id

Reject → PATCH /properties/reject/:id

Manage Users
/dashboard/admin/manage-users

Buttons:

Make Admin → PATCH /users/role

Make Agent → PATCH /users/role

Mark as Fraud → PATCH /users/fraud/:email

Remove their properties

Prevent further adds

Delete → Firebase Admin + DB

Manage Reviews
/dashboard/admin/manage-reviews

Fetch all → delete → DELETE /reviews/:id

Advertise Properties
/dashboard/admin/advertise

Click "Advertise" → POST /ads

🔁 REPORT PROPERTY (OPTIONAL)
User clicks “Report this Property”

Modal form → description

POST /reports → save to DB

Admin sees in /dashboard/admin/reports

Button: "Remove Property"

Deletes property & reviews

📊 SELLING STATS CHART (Optional)
Route: /dashboard/agent/statistics

Fetch all sold properties

Use Recharts to plot:

Property Title (X)

Price (Y)